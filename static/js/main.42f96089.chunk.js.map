{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","users","setUsers","firstname","setFirstName","lastname","setLastName","email","setEmail","id","setId","getUser","fetch","then","result","json","resp","useEffect","className","scope","map","e","onClick","method","deleteUser","item","selectUser","type","value","onChange","target","name","data","headers","body","JSON","stringify","updateUser","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.42f96089.chunk.js","sourcesContent":["import React, { useState ,useEffect } from 'react'\n\nexport default function App() {\n  const [users,setUsers] = useState([]);\n  const [firstname,setFirstName] = useState(\"\");\n  const [lastname,setLastName] = useState(\"\");\n  const [email,setEmail] = useState(\"\");\n  const [id,setId] = useState(null);\n\n  function getUser(){\n    fetch(\"http://localhost:8000/employees\").then((result)=>{\n      result.json().then((resp)=>{\n        setUsers(resp);\n        setFirstName(resp[0].firstname);\n        setLastName(resp[0].lastname);\n        setEmail(resp[0].email);\n        setId(resp[0].id);\n      })\n    })\n  }\n\n  useEffect(() => {\n    getUser();\n  }, [])\n\n                                        //delete a user\n  function deleteUser(id){\n    // console.log(id);\n    fetch(`http://localhost:8000/employees/${id}`,{\n      method:\"DELETE\"\n    }).then((result)=>{\n      result.json().then((resp)=>{\n        // console.log(resp);\n        getUser();\n      })\n    })\n  }\n\n                              //Select User for prefilled form\n   function selectUser(id){\n  //  console.log(users[id-1]);\n   let item=users[id-1];\n   setFirstName(item.firstname);\n   setLastName(item.lastname);\n   setEmail(item.email);\n   setId(item.id);\n   }\n                                  //update user data\n    function updateUser(){\n        // console.log(firstname,lastname,email,id);\n        let data={firstname,lastname,email,id}\n        fetch(`http://localhost:8000/employees/${id}`,{\n          method:\"PUT\",\n          headers:{\n            \"Accept\":\"application/json\",\n            \"Content-Type\":\"application/json\",\n          },\n          body:JSON.stringify(data)\n        }).then((result)=>{\n          result.json().then((resp)=>{\n            // console.log(resp);\n            getUser();\n           \n          })\n        })\n    }\n                              //add a new user\n      function addUser(){\n        // let data={firstname,lastname,email}\n        // fetch(`http://localhost:8000/employees`,{\n        //   method:\"P\",\n        //   headers:{\n        //     \"Accept\":\"application/json\",\n        //     \"Content-Type\":\"application/json\",\n        //   },\n        //   body:JSON.stringify(data)\n        // }).then((result)=>{\n        //   result.json().then((resp)=>{\n        //     // console.log(resp);\n        //     getUser();\n           \n        //   })\n        // })\n      }\n  return (\n    <div className=\"container\">\n      <h1 className=\"text-center my-5\">ALL METHOD OF API</h1>\n      <table className=\"table table-striped table-hover\">\n  <thead>\n    <tr> \n      <th scope=\"col\">id</th>\n      <th scope=\"col\">First Name</th>\n      <th scope=\"col\">Last Name</th>\n      <th scope=\"col\">Email</th>\n      <th scope=\"col\">Operation</th>\n      <th scope=\"col\">AutoFilled</th>\n      {/* <th scope=\"col\">Add User</th> */}\n    </tr>\n  </thead>\n  <tbody>\n    {users.map((e)=>\n    <tr key={e.id}>\n      <th scope=\"row\">{e.id}</th>\n      <td>{e.firstname}</td>\n      <td>{e.lastname}</td>\n      <td>{e.email}</td>\n      <td><button className=\"btn btn-sm btn-danger\" onClick={()=>deleteUser(e.id)}>Delete</button></td>\n      <td><button className=\"btn btn-sm btn-info\" onClick={()=>selectUser(e.id)}>Update</button></td>\n\n    </tr> \n    )}\n    \n  </tbody>\n  </table>\n  <div className=\"container text-center my-5\">\n    <input type=\"text\" value={firstname} onChange={(e)=>setFirstName(e.target.value)} name=\"firstname\" /><br/><br/>\n    <input type=\"text\" value={lastname} onChange={(e)=>setLastName(e.target.value)} name=\"lastname\" /><br/><br/>\n    <input type=\"text\" value={email} onChange={(e)=>setEmail(e.target.value)} name=\"email\" /><br/><br/>\n    <button className=\"btn btn-sm btn-success\" onClick={()=>updateUser()}>UpdateUser</button>\n    <button className=\"btn btn-sm btn-info mx-3\" onClick={()=>addUser()}>AddUser</button>\n\n  </div>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}